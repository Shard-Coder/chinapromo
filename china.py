import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

MAIN_MENU, GET_SCREENSHOT, GET_BANK_NUMBER = range(3)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
STREAMERS_CHAT_ID = os.environ.get('STREAMERS_CHAT_ID')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.", user.first_name)
    
    reply_keyboard = [['–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–û—Ç–º–µ–Ω–∞']]
    
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É.\n\n'
        '–ù–∞–∂–º–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        ),
    )

    return MAIN_MENU

async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.first_name}")
    
    if text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'. –ü–µ—Ä–µ—Ö–æ–¥ –≤ GET_SCREENSHOT.")
        return await prompt_for_screenshot(update, context)
    elif text == '–û—Ç–º–µ–Ω–∞':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∞'. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.")
        return await end_conversation(update, context)
    else:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –º–µ–Ω—é: '{text}'")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return MAIN_MENU

async def prompt_for_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. '
        '–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ, —á—Ç–æ —Ç—ã –≤–≤—ë–ª –ø—Ä–æ–º–æ–∫–æ–¥.',
        reply_markup=ReplyKeyboardRemove(),
    )
    return GET_SCREENSHOT


async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    if not update.message.photo:
        await update.message.reply_text(
            '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
        )
        return GET_SCREENSHOT

    photo_file_id = update.message.photo[-1].file_id
    context.user_data['photo_id'] = photo_file_id
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç.", user.first_name)
    
    await update.message.reply_text(
        '‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç!\n\n'
        '–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –∏–≥—Ä–µ.'
    )

    return GET_BANK_NUMBER


async def get_bank_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    bank_number = update.message.text
    
    if not bank_number.isdigit():
        await update.message.reply_text(
            '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
        )
        return GET_BANK_NUMBER

    context.user_data['bank_number'] = bank_number
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: %s", user.first_name, bank_number)

    try:
        caption = (
            f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\\!\n\n"
            f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {user.mention_markdown_v2()} \\(ID: `{user.id}`\\)\n"
            f"üí≥ **–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:** `{bank_number}`"
        )
        
        await context.bot.send_photo(
            chat_id=STREAMERS_CHAT_ID,
            photo=context.user_data['photo_id'],
            caption=caption,
            parse_mode='MarkdownV2'
        )
        logger.info("–ó–∞—è–≤–∫–∞ –æ—Ç %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞–º.", user.first_name)
        
        await update.message.reply_text(
            'üéâ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
            '–û–∂–∏–¥–∞–π —Å–≤–æ–µ–π –Ω–∞–≥—Ä–∞–¥—ã!',
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: %s", e)
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.'
        )

    context.user_data.clear()
    return ConversationHandler.END

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é.", user.first_name)
    await update.message.reply_text(
        '–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start.',
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    if not BOT_TOKEN:
        logger.critical("–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    if not STREAMERS_CHAT_ID:
        logger.critical("–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è STREAMERS_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice)
            ],
            GET_SCREENSHOT: [MessageHandler(filters.PHOTO & ~filters.COMMAND, get_screenshot)],
            GET_BANK_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bank_number)],
        },
        fallbacks=[CommandHandler('cancel', end_conversation)],
    )

    application.add_handler(conv_handler)

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


if __name__ == '__main__':
    main()
